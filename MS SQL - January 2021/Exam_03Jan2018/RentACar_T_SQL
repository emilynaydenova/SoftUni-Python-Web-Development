CREATE DATABASE RentACar
GO
USE RentACar
GO
--------------------------

CREATE TABLE Clients
(
Id int PRIMARY KEY IDENTITY,
FirstName nvarchar(30) NOT NULL,
LastName nvarchar(30) NOT NULL,
Gender char(1) CHECK(Gender IN ('M','F')),
BirthDate datetime,
CreditCard nvarchar(30) NOT NULL,
CardValidity datetime,
Email nvarchar(50) NOT NULL
)

CREATE TABLE Towns
(
Id int PRIMARY KEY IDENTITY,
[Name] nvarchar(50) NOT NULL
)

CREATE TABLE Offices
(
Id int PRIMARY KEY IDENTITY,
[Name] nvarchar(40),
ParkingPlaces int,
TownId int NOT NULL REFERENCES Towns(Id)
)

CREATE TABLE Models
(
Id int PRIMARY KEY IDENTITY,
Manufacturer nvarchar(50) NOT NULL,
Model nvarchar(50) NOT NULL,
ProductionYear datetime,
Seats int,
Class nvarchar(10),
Consumption DEC(14,2)
)

CREATE TABLE Vehicles
(
Id int PRIMARY KEY IDENTITY,
ModelId int NOT NULL REFERENCES Models(Id),
OfficeId int NOT NULL REFERENCES Offices(Id),
Mileage int
)

CREATE TABLE Orders
(
Id int PRIMARY KEY IDENTITY,
ClientId int NOT NULL REFERENCES Clients(Id),
TownId int NOT NULL REFERENCES Towns(Id),
VehicleId int NOT NULL REFERENCES Vehicles(Id),
CollectionDate datetime NOT NULL,
CollectionOfficeId int NOT NULL REFERENCES Offices(Id),
ReturnDate datetime,
ReturnOfficeId int REFERENCES Offices(Id),
Bill DEC(14,2),
TotalMileage int
)

------- 02.---------------------
INSERT INTO Models (Manufacturer,Model,ProductionYear,Seats,Class,Consumption)
VALUES
('Chevrolet','Astro','2005-07-27',4,'Economy',12.6),
('Toyota','Solara','2009-10-15',7,'Family',13.8),
('Volvo','S40','2010-10-12',3,'Average',11.3),
('Suzuki','Swift','2000-02-03',7,'Economy',16.2)


INSERT INTO Orders (ClientId,TownId,VehicleId,CollectionDate,CollectionOfficeId,
         ReturnDate,ReturnOfficeId,Bill,TotalMileage)
VALUES
(17,2,52,'2017-08-08',30,'2017-09-04',42,2360.00,7434),
(78,17,50,'2017-04-22',10,'2017-05-09',12,2326.00,7326),
(27,13,28,'2017-04-25',21,'2017-05-09',34,597.00,1880)

------ 3.-----------------
UPDATE Models
   SET Class = 'Luxury'
 WHERE Consumption > 20.0

 ------ 4. ---------------
DELETE FROM Orders
      WHERE ReturnDate IS NULL

------- 5. ---------------

  SELECT Manufacturer,
		 Model 
    FROM Models
ORDER BY Manufacturer,
         Id DESC

-------- 6. --------------
  SELECT FirstName,
         LastName
    FROM Clients
   WHERE YEAR(BirthDate) BETWEEN 1977 AND 1994
ORDER BY FirstName,
         LastName,
		 Id

--------7. ---------------
  SELECT t.[Name] AS TownName,
		 o.[Name] AS OfficeName,
	     o.ParkingPlaces
	FROM Offices o
    JOIN Towns t ON t.Id = o.TownId
   WHERE o.ParkingPlaces > 25
ORDER BY t.[Name],
         o.Id


-------- 8. -----------------
   SELECT m.Model,
          m.Seats,
		  v.Mileage
     FROM Vehicles v
     JOIN Models m ON m.Id = v.ModelId
    WHERE v.Id <> ALL(SELECT o.VehicleId       ---- !!!!
                        FROM Orders o 
                        WHERE o.ReturnDate IS NULL
						)  --- o.CollectionDate IS NOT NULL by def. 			 
 ORDER BY v.Mileage,
          m.Seats DESC,
		  m.Id
 
 -------- 9. -------------
    SELECT t.[Name] AS TownName,
          COUNT(o.Id) AS OfficesNumber
     FROM Towns t
     JOIN Offices o ON o.TownId = t.Id
 GROUP BY t.ID,t.Name
 ORDER BY OfficesNumber DESC,
          TownName


--------- 10. -------------

   SELECT m.Manufacturer,
          m.Model,
	      COUNT(o.Id) AS TimesOrdered
     FROM Orders o
RIGHT JOIN Vehicles v ON v.Id = o.VehicleId
      JOIN Models m ON m.Id = v.ModelId
 GROUP BY m.Id,m.Model,m.Manufacturer
 Order BY TimesOrdered DESC,
          Manufacturer DESC,
	      Model

-------- 11. --------------------
  SELECT Names,
         Class
  FROM
       (
		SELECT CONCAT(c.FirstName,' ',c.LastName) AS Names,
				m.Class AS Class,  
				DENSE_RANK() OVER 
					(Partition BY CONCAT(c.FirstName,' ',c.LastName)
						ORDER BY COUNT(m.Class) DESC)
						AS [Rank]
			FROM Orders o
			JOIN Clients c ON c.Id = o.ClientId
   			JOIN Vehicles v ON v.Id = o.VehicleId
			JOIN Models m ON m.Id = v.ModelId
		GROUP BY CONCAT(c.FirstName,' ',c.LastName), m.Class
	   ) s
   WHERE [Rank] = 1
ORDER BY Names,
         Class

-------- 12. ----------------------
 
SELECT [AgeGroup] =
			CASE 
				WHEN YEAR(c.Birthdate) BETWEEN 1970 AND 1979 THEN '70''s'
				WHEN YEAR(c.Birthdate) BETWEEN 1980 AND 1989 THEN '80''s'
				WHEN YEAR(c.Birthdate) BETWEEN 1990 AND 1999 THEN '90''s'
				ELSE 'Others'
			 END ,
	   SUM(o.Bill) AS Revenue,
	   AVG(o.TotalMileage) AS AverageMileage
FROM Clients c
JOIN Orders o ON o.ClientId = c.Id
GROUP BY  CASE 
				WHEN YEAR(c.Birthdate) BETWEEN 1970 AND 1979 THEN '70''s'
				WHEN YEAR(c.Birthdate) BETWEEN 1980 AND 1989 THEN '80''s'
				WHEN YEAR(c.Birthdate) BETWEEN 1990 AND 1999 THEN '90''s'
				ELSE 'Others'
			 END
ORDER BY  [AgeGroup];

--------- 13. --------------------
-- seven most ordered vehicle models found ----
WITH MostOrdered_CTE
AS
	(
	 SELECT TOP(7) v.ModelId AS Modell 
	          FROM Vehicles v
	     LEFT JOIN Orders o ON o.VehicleId = v.Id
	      GROUP BY v.ModelId
	     ORDER BY COUNT(o.Id) DESC
	 )
-- group vehicles from CTE by manufacturers -----
  SELECT m.Manufacturer,
         AVG(m.Consumption) AS AverageConsumption
    FROM Models m
    JOIN MostOrdered_CTE mo ON m.Id = mo.Modell
GROUP BY m.Manufacturer
  HAVING AVG(m.Consumption) BETWEEN 5 AND 15;

--------- 14. --------------------
 SELECT [Category Name], 
        Emails,
		Bills,
		Town
 FROM
		(SELECT CONCAT(FirstName,' ',LastName) AS [Category Name],
			    c.Id AS ClientId,
			    c.Email AS [Emails],
			    o.Bill AS [Bills],
			    t.[Name] AS [Town],
			    ROW_NUMBER() OVER (PARTITION BY t.[Name] ORDER BY o.Bill DESC) AS Rank_Bill
		   FROM Orders o
	       JOIN Clients c ON c.Id = o.ClientId
		   JOIN Towns t ON t.Id = o.TownId
		  WHERE c.CardValidity < o.CollectionDate AND Bill IS NOT NULL 
		  ) s
   WHERE Rank_Bill <= 2
ORDER BY Town,
         Bills DESC,
		 ClientId

------- 15.-----Distribution !!!---------- 
 
SELECT t.[Name] AS TownName,
       (SUM(s.M) * 100)/(ISNULL(SUM(s.M),0)+ISNULL(SUM(s.F),0)) AS MalePercent,
	   (SUM(s.F) * 100)/(ISNULL(SUM(s.M),0)+ISNULL(SUM(s.F),0)) AS FemalePecent
FROM       (
			SELECT o.TownId,
					CASE
					    WHEN (c.Gender = 'M') THEN COUNT (o.Id) ELSE NULL
					END AS M,
					CASE 
						WHEN (c.Gender = 'F') THEN COUNT(o.Id) ELSE NULL
					END AS F
			FROM Orders o
			JOIN Clients c ON c.Id = o.ClientId
			GROUP BY c.Gender,o.TownId
           ) s
JOIN Towns t ON t.Id = s.TownId 
GROUP BY t.[Name]

------- 16. --------------------

SELECT CONCAT(m.Manufacturer,' - ',m.Model)AS [Vehicle], 
       'Location' =
		  CASE
			   WHEN o.CollectionDate IS NULL  THEN 'home'
			   WHEN o.ReturnDate IS NULL      THEN 'on a rent'
			   WHEN o.ReturnOfficeId <> oc.ID THEN
				   CONCAT( (SELECT tt.[Name] FROM Towns tt WHERE tt.Id =
					(SELECT oo.TownId FROM Offices oo WHERE oo.Id = o.ReturnOfficeId))
				   ,' - ',(SELECT oo.Name FROM Offices oo WHERE oo.Id = o.ReturnOfficeId))
		  END
FROM Vehicles v
     JOIN Models m ON m.Id = v.ModelId
     JOIN Offices oc ON oc.Id = v.OfficeId
LEFT JOIN Orders o ON v.Id = o.VehicleId
 ORDER BY Vehicle,v.Id

 ------ 17. ---------------
 
 CREATE FUNCTION udf_CheckForVehicle (@townName NVARCHAR(50), @seatsNumber INT)
RETURNS NVARCHAR(100)
AS
BEGIN
    DECLARE @Result NVARCHAR(100)
    SET @Result = (SELECT TOP(1) o.[Name] + ' - ' + m.Model
                            FROM Towns t
                            JOIN Offices o ON o.TownId = t.Id
                            JOIN Vehicles v ON v.OfficeId = o.Id
                            JOIN Models m ON m.Id = v.ModelId
                           WHERE t.[Name] = @TownName AND m.Seats = @SeatsNumber
                        ORDER BY o.[Name])
    
    IF (@Result IS NULL)
           SET @Result = 'NO SUCH VEHICLE FOUND'    
     
    RETURN @Result
END


-------- 18. ------------------
CREATE PROC usp_MoveVehicle @vehicleId int, @officeId int
AS
BEGIN
    BEGIN TRANSACTION
		
		UPDATE Vehicles
		SET OfficeId = @officeId
		WHERE id = @vehicleId

		DECLARE @VehiclesCount int = 
		   ( SELECT COUNT(v.Id) FROM Vehicles v
		        WHERE v.OfficeId = @officeId)
		DECLARE @ParkingPlaces int = 
		   (SELECT ParkingPlaces FROM Offices o
		        WHERE o.Id = @officeId)
				
		IF @VehiclesCount >  @ParkingPlaces
		BEGIN
		  ROLLBACK;
		  THROW 50001, 'Not enough room in this office!',1
		END
 COMMIT
END


----------- 19. ------------------
CREATE TRIGGER tr_MoveTheTally ON Orders AFTER UPDATE
AS
BEGIN
	DECLARE @newTotalMileage int =
	(SELECT TotalMilage FROM inserted
    DECLARE @oldTotalMileage int =
	(SELECT TotalMileage FROM deleted)
	DECLARE @vehicle int =
	(SELECT VehicleId FROM inserted)

	IF(@oldTotalMileage IS NULL AND @VehicleId IS NOT NULL)
	BEGIN
		UPDATE Vehicles
		SET Mileage +=@newTotalMileage
		WHERE Id = @vehicle
	END
END
